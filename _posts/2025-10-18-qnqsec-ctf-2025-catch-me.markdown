---
layout: post
title:  "Catch Me"
date:   2025-10-18 15:31:43 -0400
author: robo.uzi
tags: [ctf]
permalink: /qnqsec-2025-catch-me/
---

**Title:** Catch Me

**Category:** stego

**Description:** TYou can look all day, but can you catch it before it slips away?

**Author:** x.two

I get a `gif` file which contains a lot of different QR codes:
```shell
file qrs.gif  
qrs.gif: GIF image data, version 89a, 300 x 300
```

I give the gif to AI and tell it to extract each frame from the gif and give me a zip containing all unique QR codes. I end up with 112 different QR codes in `png` format.

I run this python to read each QR code. They each contain a base64 encoded string:
```python
from pyzbar.pyzbar import decode
from PIL import Image

for i in range(113):
    filename = f"qr_{i:03}.png"
    try:
        img = Image.open(filename)
        result = decode(img)
        if result:
            for obj in result:
                data = obj.data.decode("utf-8")
                print(f"{filename}: {data}")
        else:
            print(f"{filename}: No QR code found.")
    except FileNotFoundError:
        print(f"{filename}: File not found.")
```

Here is some output:
```shell
cat output.txt  
qr_000.png: bmljZSB0cnkgMzA=  
qr_001.png: a2VlcCBndWVzc2luZw==  
qr_002.png: NDA0LWZsYWctbm90LWZvdW5k  
qr_003.png: eW91IGNhbid0IGZpbmQgbWUgMDM=  
qr_004.png: ZG9feW91X2V2ZW5fc2NhbiA0MA==  
qr_005.png: YWxtb3N0X2ZsYWdfYnV0X25v  
qr_006.png: bG9vayBoYXJkZXI=  
qr_007.png: ZmxhZ3tub3RfcmVhbH0=
```
I put the full output into cyberchef (recipe: [cyberchef](https://gchq.github.io/CyberChef/#recipe=Find_/_Replace(%7B'option':'Regex','string':'%5Eqr_%5C%5Cd%7B3%7D%5C%5C.png:%5C%5Cs*'%7D,'',true,false,true,false)From_Base64('A-Za-z0-9%2B/%3D',true,false)Find_/_Replace(%7B'option':'Regex','string':'%5C%5Cs%2B'%7D,'%5C%5Cn',true,false,true,false)&input=cXJfMDAwLnBuZzogYm1salpTQjBjbmtnTXpBPQpxcl8wMDEucG5nOiBhMlZsY0NCbmRXVnpjMmx1Wnc9PQpxcl8wMDIucG5nOiBOREEwTFdac1lXY3RibTkwTFdadmRXNWsKcXJfMDAzLnBuZzogZVc5MUlHTmhiaWQwSUdacGJtUWdiV1VnTURNPQpxcl8wMDQucG5nOiBaRzlmZVc5MVgyVjJaVzVmYzJOaGJpQTBNQT09CnFyXzAwNS5wbmc6IFlXeHRiM04wWDJac1lXZGZZblYwWDI1dgpxcl8wMDYucG5nOiBiRzl2YXlCb1lYSmtaWEk9CnFyXzAwNy5wbmc6IFpteGhaM3R1YjNSZmNtVmhiSDA9CnFyXzAwOC5wbmc6IGVXOTFJR05oYmlkMElHWnBibVFnYldVPQpxcl8wMDkucG5nOiBabXhoWjN0dWIzUmZjbVZoYkgwZ09ERT0KcXJfMDEwLnBuZzogYzJWaGNtTm9JR1ZzYzJWM2FHVnlaUT09CnFyXzAxMS5wbmc6IGQzSnZibWRmZEhWeWJnPT0KcXJfMDEyLnBuZzogZEdocGN5QnBjeUJ1YjNRZ1lTQm1iR0ZuCnFyXzAxMy5wbmc6IGJtOTBJSFJvYVhNZ2IyNWwKcXJfMDE0LnBuZzogYzNScGJHd2dibTkwYUdsdVp5Qm9aWEpsCnFyXzAxNS5wbmc6IFpHVmpiM2xmY0dGNWJHOWhaRjh6CnFyXzAxNi5wbmc6IGRISjVYMkZmWkdsbVptVnlaVzUwWDNSdmIydz0KcXJfMDE3LnBuZzogYzJWaGNtTm9JR1ZzYzJWM2FHVnlaU0EwCnFyXzAxOC5wbmc6IGJtOXdaUT09CnFyXzAxOS5wbmc6IFpHVmpiM2xmY0dGNWJHOWhaRjh5CnFyXzAyMC5wbmc6IGRHaHBjeUJwY3lCdWIzUWdZU0JtYkdGbklETT0KcXJfMDIxLnBuZzogWkc5ZmVXOTFYMlYyWlc1ZmMyTmhiZz09CnFyXzAyMi5wbmc6IGRHaHBjeUJwY3lCdWIzUWdZU0JtYkdGbklEYzIKcXJfMDIzLnBuZzogYTJWbGNDQm5kV1Z6YzJsdVp5QXlNak0wCnFyXzAyNC5wbmc6IFpHVmpiM2xmY0dGNWJHOWhaRjh6SURRPQpxcl8wMjUucG5nOiBZbVYwZEdWeUlHeDFZMnNnYm1WNGRDQjBhVzFsCnFyXzAyNi5wbmc6IGJtOTBYM1JvWlY5bWJHRm5YM2x2ZFY5elpXVnJJREl5TmpZPQpxcl8wMjcucG5nOiBabUZzYzJWZmNHOXphWFJwZG1VPQpxcl8wMjgucG5nOiBjMlZoY21Ob0lHVnNjMlYzYUdWeVpTQTJPVEk9CnFyXzAyOS5wbmc6IGJHOXZheUJvWVhKa1pYSWdPVGcwCnFyXzAzMC5wbmc6IFlXeHRiM04wWDJac1lXZGZZblYwWDI1dklEYz0KcXJfMDMxLnBuZzogWVd4dGIzTjBJSFJvWlhKbApxcl8wMzIucG5nOiBaR1ZqYjNsZmNHRjViRzloWkY4eElEST0KcXJfMDMzLnBuZzogYzNScGJHd2dibTkwYUdsdVp5Qm9aWEpsSURBME9RPT0KcXJfMDM0LnBuZzogWW1WMGRHVnlJR3gxWTJzZ2JtVjRkQ0IwYVcxbElEYzBNVGM9CnFyXzAzNS5wbmc6IFpHVmpiM2xmY0dGNWJHOWhaRjh4CnFyXzAzNi5wbmc6IGRHaHBjeUJwY3lCdWIzUWdZU0JtYkdGbklEWTJPVEk9CnFyXzAzNy5wbmc6IE5EQTBMV1pzWVdjdGJtOTBMV1p2ZFc1a0lEaz0KcXJfMDM4LnBuZzogZEhKNVgyRmZaR2xtWm1WeVpXNTBYM1J2YjJ3Z01UY3cKcXJfMDM5LnBuZzogWkc5ZmVXOTFYMlYyWlc1ZmMyTmhiaUE0TlE9PQpxcl8wNDAucG5nOiBibTkwWDNSb1pWOW1iR0ZuWDNsdmRWOXpaV1ZyCnFyXzA0MS5wbmc6IGVXOTFJR05oYmlkMElHWnBibVFnYldVZ05qQTEKcXJfMDQyLnBuZzogYldGNVltVWdibVY0ZENCMGFXMWwKcXJfMDQzLnBuZzogYm05d1pTQTJPREl5CnFyXzA0NC5wbmc6IFpteGhaM3R1YjNSZmNtVmhiSDBnTVE9PQpxcl8wNDUucG5nOiBkSEo1WDJGZlpHbG1abVZ5Wlc1MFgzUnZiMndnTmpBNQpxcl8wNDYucG5nOiBlVzkxSUdOaGJpZDBJR1pwYm1RZ2JXVWdNQT09CnFyXzA0Ny5wbmc6IGRISjVJR0ZuWVdsdUlHeGhkR1Z5SURneU5nPT0KcXJfMDQ4LnBuZzogWkdWamIzbGZjR0Y1Ykc5aFpGOHlJREV3Tmc9PQpxcl8wNDkucG5nOiBhMlZsY0NCbmRXVnpjMmx1WnlBNE5UQXcKcXJfMDUwLnBuZzogYm1salpTQjBjbmtnTVRnPQpxcl8wNTEucG5nOiBibWxqWlNCMGNua2dNekExCnFyXzA1Mi5wbmc6IGQzSnZibWRmZEhWeWJpQTJOalU9CnFyXzA1My5wbmc6IGJXRjVZbVVnYm1WNGRDQjBhVzFsSURBME5BPT0KcXJfMDU0LnBuZzogYm05MFgzUm9aVjltYkdGblgzbHZkVjl6WldWcklEazVNQT09CnFyXzA1NS5wbmc6IFpteGhaM3R1YjNSZmNtVmhiSDBnT1RBME13PT0KcXJfMDU2LnBuZzogWVd4dGIzTjBJSFJvWlhKbElEVTNNZz09CnFyXzA1Ny5wbmc6IGQzSnZibWRmZEhWeWJpQXkKcXJfMDU4LnBuZzogVVc1UlUyVmplME0wVkVOSVgwMHpYekZHWDFrd1ZWOURORTU5CnFyXzA1OS5wbmc6IGJtbGpaU0IwY25rPQpxcl8wNjAucG5nOiBiV0Y1WW1VZ2JtVjRkQ0IwYVcxbElEYz0KcXJfMDYxLnBuZzogZDNKdmJtZGZkSFZ5YmlBMk5qYzQKcXJfMDYyLnBuZzogZEhKNVgyRmZaR2xtWm1WeVpXNTBYM1J2YjJ3Z09BPT0KcXJfMDYzLnBuZzogWW1WMGRHVnlJR3gxWTJzZ2JtVjRkQ0IwYVcxbElEYz0KcXJfMDY0LnBuZzogWW1WMGRHVnlJR3gxWTJzZ2JtVjRkQ0IwYVcxbElEZz0KcXJfMDY1LnBuZzogWW1WMGRHVnlJR3gxWTJzZ2JtVjRkQ0IwYVcxbElEVT0KcXJfMDY2LnBuZzogYTJWbGNDQm5kV1Z6YzJsdVp5QTJNUT09CnFyXzA2Ny5wbmc6IGJtbGpaU0IwY25rZ09EYz0KcXJfMDY4LnBuZzogTkRBMExXWnNZV2N0Ym05MExXWnZkVzVrSURjeU16UT0KcXJfMDY5LnBuZzogYldGNVltVWdibVY0ZENCMGFXMWxJREE0CnFyXzA3MC5wbmc6IFlXeHRiM04wWDJac1lXZGZZblYwWDI1dklEZzNOQT09CnFyXzA3MS5wbmc6IGEyVmxjQ0JuZFdWemMybHVaeUExTWprPQpxcl8wNzIucG5nOiBibTkwSUhSb2FYTWdiMjVsSURBMU5ETT0KcXJfMDczLnBuZzogZEhKNUlHRm5ZV2x1SUd4aGRHVnlJREEyTnpNPQpxcl8wNzQucG5nOiBZV3h0YjNOMElIUm9aWEpsSURVMApxcl8wNzUucG5nOiBkSEo1SUdGbllXbHVJR3hoZEdWeQpxcl8wNzYucG5nOiBhMlZsY0NCbmRXVnpjMmx1WnlBMU1qYz0KcXJfMDc3LnBuZzogZEhKNUlHRm5ZV2x1SUd4aGRHVnlJRFE9CnFyXzA3OC5wbmc6IFpHOWZlVzkxWDJWMlpXNWZjMk5oYmlBM056RXcKcXJfMDc5LnBuZzogYm05MElIUm9hWE1nYjI1bElESXcKcXJfMDgwLnBuZzogZDNKdmJtZGZkSFZ5YmlBME16QT0KcXJfMDgxLnBuZzogWVd4dGIzTjBJSFJvWlhKbElEYz0KcXJfMDgyLnBuZzogYm05d1pTQTBOVE09CnFyXzA4My5wbmc6IFpteGhaM3R1YjNSZmNtVmhiSDBnT0E9PQpxcl8wODQucG5nOiBabUZzYzJWZmNHOXphWFJwZG1VZ01RPT0KcXJfMDg1LnBuZzogYm1salpTQjBjbmtnTmpFNApxcl8wODYucG5nOiBlVzkxSUdOaGJpZDBJR1pwYm1RZ2JXVWdPRGd6CnFyXzA4Ny5wbmc6IGJtOTBJSFJvYVhNZ2IyNWxJRGN4CnFyXzA4OC5wbmc6IFlXeHRiM04wWDJac1lXZGZZblYwWDI1dklERXpNekU9CnFyXzA4OS5wbmc6IGMzUnBiR3dnYm05MGFHbHVaeUJvWlhKbElETTBOZz09CnFyXzA5MC5wbmc6IGMzUnBiR3dnYm05MGFHbHVaeUJvWlhKbElERTNNUT09CnFyXzA5MS5wbmc6IGJtOTBJSFJvYVhNZ2IyNWxJRGczCnFyXzA5Mi5wbmc6IGJXRjVZbVVnYm1WNGRDQjBhVzFsSURnNU5RPT0KcXJfMDkzLnBuZzogWW1WMGRHVnlJR3gxWTJzZ2JtVjRkQ0IwYVcxbElEQTVOemc9CnFyXzA5NC5wbmc6IGJtOTBYM1JvWlY5bWJHRm5YM2x2ZFY5elpXVnJJRFUwT0E9PQpxcl8wOTUucG5nOiBibTkwWDNSb1pWOW1iR0ZuWDNsdmRWOXpaV1ZySURrME5RPT0KcXJfMDk2LnBuZzogZEhKNVgyRmZaR2xtWm1WeVpXNTBYM1J2YjJ3Z053PT0KcXJfMDk3LnBuZzogYkc5dmF5Qm9ZWEprWlhJZ01UTT0KcXJfMDk4LnBuZzogZEhKNVgyRmZaR2xtWm1WeVpXNTBYM1J2YjJ3Z05EQXcKcXJfMDk5LnBuZzogYzJWaGNtTm9JR1ZzYzJWM2FHVnlaU0F5T0RVNQpxcl8xMDAucG5nOiBkSEo1SUdGbllXbHVJR3hoZEdWeUlESTJNalE9CnFyXzEwMS5wbmc6IFltVjBkR1Z5SUd4MVkyc2dibVY0ZENCMGFXMWxJRFV4TVRFPQpxcl8xMDIucG5nOiBaR1ZqYjNsZmNHRjViRzloWkY4eklEQTIKcXJfMTAzLnBuZzogTkRBMExXWnNZV2N0Ym05MExXWnZkVzVrSURrdwpxcl8xMDQucG5nOiBaRzlmZVc5MVgyVjJaVzVmYzJOaGJpQXcKcXJfMTA1LnBuZzogZDNKdmJtZGZkSFZ5YmlBMwpxcl8xMDYucG5nOiBibWxqWlNCMGNua2dPQT09CnFyXzEwNy5wbmc6IFpteGhaM3R1YjNSZmNtVmhiSDBnTmpBMgpxcl8xMDgucG5nOiBhMlZsY0NCbmRXVnpjMmx1WnlBNE1BPT0KcXJfMTA5LnBuZzogWkdWamIzbGZjR0Y1Ykc5aFpGOHlJRFEwCnFyXzExMC5wbmc6IFltVjBkR1Z5SUd4MVkyc2dibVY0ZENCMGFXMWxJRE0yTkRBPQpxcl8xMTEucG5nOiBlVzkxSUdOaGJpZDBJR1pwYm1RZ2JXVWdOekk9CnFyXzExMi5wbmc6IFlXeHRiM04wSUhSb1pYSmxJRE14T0E9PQo)) and find the flag.

`QnQSec{C4TCH_M3_1F_Y0U_C4N}`